// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using buckstore.auth.service.infrastructure.Data.Context;

namespace buckstore.auth.service.infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201116175529_AddRefreshTokenTable")]
    partial class AddRefreshTokenTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("buckstore.auth.service.domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("cpf")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnName("userType")
                        .HasColumnType("integer");

                    b.Property<string>("_credCard")
                        .HasColumnName("credCard")
                        .HasColumnType("text");

                    b.Property<string>("_password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.Property<byte[]>("_passwordSalt")
                        .IsRequired()
                        .HasColumnName("passwordSalt")
                        .HasColumnType("bytea");

                    b.Property<Guid?>("refreshTokenId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("refreshTokenId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("buckstore.auth.service.domain.Aggregates.UserAggregate.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("_refreshToken")
                        .HasColumnName("userRefreshToken")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserRefreshToken");
                });

            modelBuilder.Entity("buckstore.auth.service.domain.Aggregates.UserAggregate.User", b =>
                {
                    b.HasOne("buckstore.auth.service.domain.Aggregates.UserAggregate.UserRefreshToken", "RefreshToken")
                        .WithOne()
                        .HasForeignKey("buckstore.auth.service.domain.Aggregates.UserAggregate.User", "refreshTokenId");

                    b.OwnsOne("buckstore.auth.service.domain.Aggregates.UserAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
